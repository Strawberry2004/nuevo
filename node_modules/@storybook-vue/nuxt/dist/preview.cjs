'use strict';

const vue3 = require('@storybook/vue3');
const app = require('nuxt/app');
const unctx = require('unctx');
const ofetch = require('ofetch');
const virtual_nuxtRuntimeConfig = require('virtual:nuxt-runtime-config');
require('#build/css');
const plugins = require('#build/plugins');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const plugins__default = /*#__PURE__*/_interopDefaultCompat(plugins);

const pluginsTyped = plugins__default;
vue3.setup(async (vueApp, storyContext) => {
  const key = storyContext?.id;
  if (!key) {
    throw new Error("StoryContext is not provided");
  }
  const storyNuxtAppId = `nuxt-app-${key}`;
  const storyNuxtCtx = unctx.getContext(storyNuxtAppId);
  if (storyNuxtCtx.tryUse()) {
    return;
  }
  window.__NUXT__ = {
    serverRendered: false,
    config: {
      public: {},
      app: { baseURL: "/" },
      ...virtual_nuxtRuntimeConfig.runtimeConfig
    },
    data: {},
    state: {}
  };
  if (!globalThis.$fetch) {
    globalThis.$fetch = ofetch.$fetch.create({
      baseURL: "/"
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    });
  }
  const nuxt = app.createNuxtApp({
    id: storyNuxtAppId,
    vueApp
  });
  storyNuxtCtx.set(nuxt, true);
  unctx.getContext("nuxt-app").set(nuxt, true);
  await app.applyPlugins(nuxt, pluginsTyped);
  await nuxt.hooks.callHook("app:created", vueApp);
  await nuxt.hooks.callHook("app:beforeMount", vueApp);
});
