import { useLogger, defineNuxtModule } from '@nuxt/kit';
import { colors } from 'consola/utils';
import { resolve } from 'node:path';
import { getPort } from 'get-port-please';
import { withTrailingSlash } from 'ufo';
import { cache } from '@storybook/core-common';
import { withTelemetry, buildDevStandalone } from '@storybook/core-server';

const logger = useLogger("nuxt:storybook");

const buildLogger = logger.withTag("build");
function printError(error) {
  if (error instanceof Error) {
    if (error.error) {
      buildLogger.error(error.error);
    } else if (error.stats?.compilation?.errors) {
      error.stats.compilation.errors.forEach((e) => buildLogger.log(e));
    } else {
      buildLogger.error(error);
    }
  } else if (error.compilation?.errors) {
    error.compilation.errors.forEach((e) => buildLogger.log(e));
  }
  buildLogger.warn(
    error.close ? `
          FATAL broken build!, will close the process,
          Fix the error below and restart storybook.
        ` : `
          Broken build, fix the error above.
          You may need to refresh the browser.
        `
  );
}
async function setupStorybook(options, nuxt) {
  const storybookRoute = options.route;
  const storybookServerPort = await getPort({
    ports: [options.port || 6006, 6007, 6008, 6009, 6010]
  });
  const projectDir = resolve(nuxt.options.rootDir);
  const storybookOptions = {
    port: storybookServerPort,
    configDir: resolve(projectDir, "./.storybook"),
    configType: "DEVELOPMENT",
    cache: cache,
    // Don't check for storybook updates (we're using the latest version)
    versionUpdates: false,
    quiet: options.logLevel < 4,
    // 4 = debug
    https: Boolean(options.https),
    sslCert: typeof options.https === "object" ? options.https.cert : void 0,
    sslKey: typeof options.https === "object" ? options.https.key : void 0
  };
  if (!nuxt.options.dev)
    return;
  logger.verbose("Starting Storybook");
  const result = await withTelemetry(
    "dev",
    {
      cliOptions: {},
      presetOptions: {
        ...storybookOptions,
        corePresets: [],
        overridePresets: []
      },
      printError
    },
    () => buildDevStandalone(storybookOptions)
  );
  if (!result) {
    logger.error("Failed to start Storybook");
    return;
  }
  logger.log(
    `  \u279C Storybook: ${colors.underline(withTrailingSlash(result.address))}`
  );
  logger.verbose(
    `  \u279C Storybook: ${colors.underline(withTrailingSlash(result.networkAddress))}`
  );
  nuxt.hook("build:done", () => {
    logger.verbose(" ");
    logger.verbose("\u2714 Storybook build done  ");
    logger.verbose("  ");
    import.meta.env = import.meta.env || {};
    import.meta.env.__STORYBOOK__ = JSON.stringify(options);
  });
  nuxt.hook("devtools:customTabs", (tabs) => {
    tabs.push({
      // unique identifier
      name: "nuxt-storybook",
      // title to display in the tab
      title: "Storybook",
      // any icon from Iconify, or a URL to an image
      icon: "devicon:storybook",
      // iframe view
      view: {
        type: "iframe",
        // absolute URL to the iframes
        src: `${storybookRoute}/`
      }
    });
  });
}

const module = defineNuxtModule({
  meta: {
    name: "@nuxtjs/storybook",
    configKey: "storybook",
    compatibility: {
      nuxt: ">=3.0.0",
      builder: {
        // Not compatible with webpack
        webpack: false
      }
    }
  },
  defaults: (nuxt) => ({
    host: import.meta.env?.STORYBOOK_HOST || "http://localhost",
    route: "/_storybook",
    port: 6006,
    logLevel: nuxt.options.logLevel === "silent" ? 0 : 3,
    enabled: true,
    https: false
  }),
  async setup(options, nuxt) {
    if (import.meta.env?.__STORYBOOK__ || !options.enabled)
      return;
    logger.level = options.logLevel;
    logger.verbose("\u{1F50C}  Storybook Module Setup");
    setupStorybook(options, nuxt);
  }
});

export { module as default };
